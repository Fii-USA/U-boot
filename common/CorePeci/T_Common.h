/*-------------------------------------------------------------------------
 * Copyright (c) 2008-2009 by Nuvoton Technology Israel
 * All rights reserved.
 *
 * Contents: Includes all definitions which are for internal Template use.
 *------------------------------------------------------------------------*/
#ifndef __T_COMMON_H__
#define __T_COMMON_H__

#include <tl_common.h>
#include <CoreRegisters.h>

/*------------------------------------------------------------------------*/
/*----------------   Constants and macros definitions  -------------------*/
/*------------------------------------------------------------------------*/

/*-------------*/
/* Message Box */
/*-------------*/

// Message buffer
#define	MSG_MAX_SIZE					120						// Specifies the longest string allowed
																// This is used if Core Code is executed via debugger without any host to read the messages
// Address in Core Code (Must be also updated in Test's code, Common.h file)
#define MSG_REG_SIZE					0x200					// The total size of all the Message registers below
#define	MSG_MIN_BUF_SIZE				0x80					// The minimum text buffer size required
#define	MESSAGE_BUFFER					(MsgRegBA+MSG_REG_SIZE)	// The address in Core of the message text buffer

// Semaphore Registers (in Core memory)
#define	msgStatus						HW_DWORD(MsgRegBA+0x00)	// See enum below
#define msgRunTest						HW_DWORD(MsgRegBA+0x04)	// Test ID (taken from TEST_ENUM) to be executed
#define msgCommand						HW_DWORD(MsgRegBA+0x08)	// Command request ID from Host
#define msgTestCommand					HW_DWORD(MsgRegBA+0x0C)	// Command register for custom tests
#define msgParameters					HW_DWORD(MsgRegBA+0x10)	// Special test parameters (System Clock)
#define msgRandomSeed					HW_DWORD(MsgRegBA+0x14)	// Random Seed value generated by the Host and passed to the Core
#define msgBufferSize					HW_DWORD(MsgRegBA+0x18)	// The size of the messages buffer
#define msgTxtCorePos					HW_WORD	(MsgRegBA+0x1C)	// A pointer which points to the next available offset within the MessageBuffer
#define msgTxtHostPos					HW_WORD	(MsgRegBA+0x20)	// Points to the position of the Host within the MessageBuffer
#define msgTxtDisplay					HW_BYTE	(MsgRegBA+0x24)	// Specify whether to print messages to the Host (it is required to disabled messages while debugging)

// Parameters and data passed between Host and Core, for executing functions
#define msgCmdParam1					HW_DWORD(MsgRegBA+0x40)	
#define msgCmdParam2					HW_DWORD(MsgRegBA+0x44)
#define msgCmdParam3					HW_DWORD(MsgRegBA+0x48)
#define msgCmdParam4					HW_DWORD(MsgRegBA+0x4C)
#define msgCmdParam5					HW_DWORD(MsgRegBA+0x50)
#define msgCmdParam6					HW_DWORD(MsgRegBA+0x54)
#define msgCmdParam7					HW_DWORD(MsgRegBA+0x58)
#define msgCmdParam8					HW_DWORD(MsgRegBA+0x5C)

// msgData0-9 at address 60h-B0h
//Hila. Dec 12 2014 Increase size to 20
#define	MSG_DATA_NUM					20
#define	msgData(n)						HW_DWORD(MsgRegBA+0x60 + (n * sizeof(DWORD)))

// 'msgStatus' Semaphore Register bits
enum
{
	MSG_TEST_DONE = 0,									// Bit 0 - Test is has been finished
	MSG_RETURN_CODE,									// Bit 1 - If set, indicates of an error (TBD)
	MSG_BUFFER_FULL,									// Bit 2 - Message buffer is full, Host must read from buffer, otherwise, Core is on hold
	MSG_COMMAND_DONE,									// Bit 3 - If set, indicates that the Command has been executed by Host
	MSG_TCOMMAND_DONE,									// Bit 4 - If set, indicates that the Test Command has been executed by Host
	MSG_TRIGGER
};

// 'msgParameters' Semaphore Register bits
enum
{
	MSG_PARAM_SILENT = 0,									// Bit 0 - No message printing
	MSG_PARAM_WAIT4HOST,									// Bit 1 - The core waits until the host reads a text message before continuing
	MSG_PARAM_CMD_NO_WAIT									// Bit 2 - The core doesn't wait until Host completes the command (MSG_Command and MSG_TestCommand functions returns immediately)
};

/*------------------------------------------------------------------------*/
/*---------------------   Data Types definitions   -----------------------*/
/*------------------------------------------------------------------------*/

typedef enum MsgType
{
	MSG_NORMAL = 0,
	MSG_PASS,
	MSG_FAIL,
	MSG_TITLE,
	MSG_HEADER,
	MSG_PROGRESS
} MsgType;

/*------------------------------------------------------------------------*/
/*---------------------------   Externs   --------------------------------*/
/*------------------------------------------------------------------------*/
extern DWORD	MsgRegBA;

/*------------------------------------------------------------------------*/
/*-----------------------   Function headers   ---------------------------*/
/*------------------------------------------------------------------------*/

#endif	// __T_COMMON_H__
